if game.PlaceId ~= 7326500950 then
    return
end
if _G.Injected ~= nil then
    return
else
    _G.Injected = true
end
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local UserInputService = game:GetService("UserInputService")
local namecall
if Player == nil then
    game.Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
    Player = game.Players.LocalPlayer
end

game.StarterGui:SetCore("SendNotification", {
    Title = 'LOADING';
    Text = "Loading script. Enter a round to fully load.";
    Icon = "rbxassetid://2541869220";
    Duration = 7;
})

local ClientFolder = game:GetService("ReplicatedStorage"):WaitForChild("Client")
local Statistics = ClientFolder:WaitForChild("Modules",10000)

local Toggles = {
    Killaura = false;
    InfStamina = false;
    AutoBlock = false;
    OneShot = false;
    SilentAim = false;
}

local Debounces = {
    KillAura = false;
}

local Variables = {
    -- Values --

    KillAuraDistance = 40;

    -- Connections --

    RenderStepConnection = nil;
    StaminaUpdateConnection = nil;

}

local Tables = {
    Stats = {
        WeaponStats = require(Statistics:WaitForChild("W_STATISTICS",20));
    };
    SuperRun = {
        WHeld = false;
        SHeld = false;
        AHeld = false;
        DHeld = false;
        ShiftHeld = false;
        RunSpeed = 1;
    };
    Lists = {
        DamageTypes = {"burning","bleed","toxicated","sepsis"};
        LoopedFeatures = {"KillAura","SuperRun"};
    }
}

-- ESSENTIAL FUNCTIONS --

local function GrabMainScript()
    local Script = nil
    for i,v in pairs(Player.Backpack.GetChildren(Player.Backpack)) do
        if v:IsA("LocalScript") and v.Name ~= "ClickDetectorScript" then
            Script = v
        end
    end
    return Script
end;

local function GetArgs(inputstring)
    inputstring = string.lower(inputstring)
    inputstring = string.gsub(inputstring, "'", "")
    inputstring = string.gsub(inputstring, ":", "")
    inputstring = string.gsub(inputstring, ";", "")
    inputstring = string.gsub(inputstring, "%.", "")
    inputstring = string.gsub(inputstring, "/e ", "")
    inputstring = string.gsub(inputstring, "/w ", "")
    local args = string.split(inputstring, " ")
    args.Command = args[1]
    table.remove(args, 1)
    return args
end;

-- FEATURE FUNCTIONS -- 

local function Attack(Model,UntilDeath)
    game:GetService("ReplicatedStorage").Server.Events.Attack:FireServer("Charged", Model, 1, 1.0478, true)
end

local function GetClosest()
    local LowestDistance = math.huge
    local ClosestCharacter = nil
    local Players = game.Players.GetPlayers(game.Players)
    local Characters = {}
    for i,v in pairs(Players) do
        if v ~= Player and v.Character ~= nil then
            table.insert(Characters, v.Character)
        end
    end
    for i,v in pairs(Characters) do
        if v ~= nil then
            if v.FindFirstChild(v, "HumanoidRootPart") then
                local InitialDis = (v.HumanoidRootPart.Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                local Ray = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * InitialDis)
                local Part,Position = game.Workspace.FindPartOnRay(game.Workspace, Ray, game.Workspace)
                local FinalDifference = math.floor((Position - v.HumanoidRootPart.Position).magnitude)
                if FinalDifference < LowestDistance then
                    ClosestCharacter = v
                    LowestDistance = FinalDifference
                end
            end
        end
    end
    return ClosestCharacter
end

-- CONNECTION FUNCTIONS -- 

local function RenderStepped()
    if Tables.SuperRun.ShiftHeld == true and Toggles.SuperRun == true and Player.Character ~= nil and Player.Character:FindFirstChild("HumanoidRootPart") then
        if Tables.SuperRun.WHeld == true then
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-Tables.SuperRun.RunSpeed)
        end
        if Tables.SuperRun.SHeld == true then
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.new(0,0,Tables.SuperRun.RunSpeed)
        end
        if Tables.SuperRun.DHeld == true then
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.new(Tables.SuperRun.RunSpeed,0,0)
        end
        if Tables.SuperRun.AHeld == true then
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.new(-Tables.SuperRun.RunSpeed,0,0)
        end
    end
    if Toggles.KillAura and not Debounces.KillAura then
        Debounces.KillAura = true
        local Enemies = Players:GetPlayers()
        for i = 1,#Enemies do
            if Enemies[i] ~= Player and Enemies[i].Character ~= nil then
                local Character = Enemies[i].Character
                if Character ~= nil and Character:FindFirstChild("HumanoidRootPart") and Player:DistanceFromCharacter(Character.HumanoidRootPart.Position) <= Variables.KillAuraDistance then
                    Attack(Character)
                    wait(0.3)
                end
            end
        end
        wait(1)
        Debounces.KillAura = false
    end
end

local function CharacterLoaded(character)
    if Toggles.AutoBlock then
        game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", true)
    end
    if Toggles.InfStamina then
        repeat wait() until GrabMainScript() ~= nil
        local TempEnv = getsenv(GrabMainScript())
        local HUD = Player.PlayerGui:WaitForChild("HUD",10) or Player.PlayerGui
        local StaminaFrame = HUD:WaitForChild("StaminaFrame",10)
        if TempEnv == nil or StaminaFrame == nil then
            return
        end
        repeat wait() until TempEnv["Stagger"] ~= nil
        local UpValues = getupvalues(TempEnv.Stagger)
        task.wait(0.3)
        if Variables.StaminaUpdateConnection ~= nil then
            Variables.StaminaUpdateConnection:Disconnect()
            Variables.StaminaUpdateConnection = nil
        end
        for i,v in pairs(UpValues) do
            if v == tonumber(StaminaFrame.EmptyBar.TextLabel.Text) then
                setupvalue(TempEnv.Stagger,i,100)
                if Variables.StaminaUpdateConnection == nil then
                    Variables.StaminaUpdateConnection = StaminaFrame.EmptyBar.TextLabel.Changed:Connect(function()
                         local MainScript = GrabMainScript()
                         if MainScript ~= nil then
                             local TempEnv = getsenv(MainScript)
                             setupvalue(TempEnv.Stagger,i,100) 
                         end
                    end)
                end
            end
        end
        StaminaFrame.EmptyBar.TextLabel.Text = 100
    end
end

-- Meta Functions --

namecall = hookmetamethod(game, "__namecall", function(self, ...)
    local Method = getnamecallmethod()
    if Method == "FireServer" or Method == "InvokeServer" then
        local Args = {...}
        local RemoteName = tostring(self)
        if RemoteName == "Update" then
           if Toggles.InfStamina and Args[1] == "Stamina" then
               return
           elseif Toggles.AutoBlock and not checkcaller() and Args[1] == "Blocking" and Args[2] == false then
               return
           end
        end
        if RemoteName == "Sound" then
            if Toggles.SilentAim and not checkcaller() and typeof(Args[3]) == "table" then
                if Toggles.AutoBlock then
                    game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", false)
                end
                local AttackType = Args[2]
                if AttackType == "Fire" then
                    AttackType = "Gun"
                elseif AttackType == "SwingCharged" then
                    AttackType = "Charged"
                else
                    AttackType = "Jab"
                end
                local Target = GetClosest()
                if Target ~= nil and AttackType == "Gun" then
                    game.ReplicatedStorage.Server.Events.Attack.FireServer(game.ReplicatedStorage.Server.Events.Attack, AttackType, Target, Args[3][2], nil, false)
                elseif Target ~= nil and AttackType == "Charged" then
                    game.ReplicatedStorage.Server.Events.Attack.FireServer(game.ReplicatedStorage.Server.Events.Attack, AttackType, Target, Args[3][2], 1.0478, true)
                elseif Target ~= nil and AttackType == "Jab" then
                    game.ReplicatedStorage.Server.Events.Attack.FireServer(game.ReplicatedStorage.Server.Events.Attack, AttackType, Target, Args[3][2], nil, false)
                end
                if Toggles.AutoBlock then
                    spawn(function()
                        task.wait()
                        game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", true)
                    end)
                end
                return namecall(self, ...)
            end
        end
        if RemoteName == "Attack" then
            if Toggles.AutoBlock then
                game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", false)
            end
--[[
            if Toggles.OneShot and not checkcaller() and typeof(Args[2]) == "Instance" and Args[2].ClassName == "Model" then
                local Model = Args[2]
                if not Model.FindFirstChild(Model,"Humanoid") or not Player.FindFirstChild(Player,"Inventory") then
                    return namecall(self, ...)
                end
                local WeaponName = Player.Inventory["Slot"..tostring(Args[3])].Value
                local WeaponStats = Tables.Stats.WeaponStats[WeaponName]
                if WeaponStats == nil or WeaponStats["DamageRating"] == nil then
                    return namecall(self, ...)
                end
                local Damage
                if Args[1] == "Jab" then
                    Damage = WeaponStats["DamageRating"][1]
                elseif Args[1] == "Charged" then
                    Damage = WeaponStats["DamageRating"][2]
                elseif Args[1] == "Gun" then
                    Damage = WeaponStats["DamageRating"][3] or WeaponStats["DamageRating"][2]
                end
                spawn(function()
                    for i = 1,math.floor((Model.Humanoid.Health/Damage)) + 1 do
                        if game.Players.LocalPlayer.Character ~= nil then
                            if game.Players.LocalPlayer.Character.States.FindFirstChild(game.Players.LocalPlayer.Character.States,"ChargedAttack").Value == true then
                                game.Players.LocalPlayer.Character.States.ChargedAttack.Changed:Wait()
                            elseif game.Players.LocalPlayer.Character.States.FindFirstChild(game.Players.LocalPlayer.Character.States,"JabAttack").Value == true then
                                game.Players.LocalPlayer.Character.States.JabAttack.Changed:Wait()
                            end
                        end
                        game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", false)
                        self.FireServer(self, unpack(Args))
                    end
                    game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", true)
                end)
            end
--]]
            if Toggles.AutoBlock then
                spawn(function()
                    task.wait()
                    game.ReplicatedStorage.Server.Events.Update.FireServer(game.ReplicatedStorage.Server.Events.Update,"Blocking", true)
                end)
                return namecall(self, ...)
            end
        end
    end
    return namecall(self, ...)
end)

-- Commands & Command Handling --

local Commands = {
    --[[
    template = {
        Aliases = {};
        Description = "";
        Function = function(Enabling,Args)
            Toggles.COMMAND = Enabling
            local currenttext = ""
            if Enabling == true then
                currenttext = "COMMAND is now ON!"
            else
                currenttext = "COMMAND is now OFF!"
            end
            game.StarterGui:SetCore("SendNotification", {
                Title = "notification";
                Text = currenttext;
                Icon = "rbxassetid://2541869220";
                Duration = 3;
            })
        end;
    };
    --]]
    killaura = {
        Aliases = {"killaura","murderaura","proximitykill","closekill","killclose"};
        Description = "Attacks anyone close to you.";
        Function = function(Enabling,Args)
            local Amount = tonumber(Args[1]) or tonumber(Args[2])
            if Amount ~= nil then
                Variables.KillAuraDistance = Amount
                game.StarterGui:SetCore("SendNotification", {
                    Title = "notification";
                    Text = "KillAura distance is now "..tostring(Amount);
                    Icon = "rbxassetid://2541869220";
                    Duration = 3;
                })
                return
            end
            Toggles.KillAura = Enabling
            local currenttext = ""
            if Enabling == true then
                if Variables.RenderStepConnection == nil then
                    Variables.RenderStepConnection = game:GetService("RunService").Stepped:Connect(RenderStepped)
                end
                currenttext = "KillAura is now ON!"
            else
                local LoopOff = false
                for i = 1,#Tables.Lists.LoopedFeatures do
                    if Toggles[Tables.Lists.LoopedFeatures[i]] == true then
                        LoopOff = true
                        break
                    end
                end
                if Variables.RenderStepConnection ~= nil and LoopOff then
                    Variables.RenderStepConnection:Disconnect()
                    Variables.RenderStepConnection = nil
                end
                currenttext = "KillAura is now OFF!"
            end
            game.StarterGui:SetCore("SendNotification", {
                Title = "notification";
                Text = currenttext;
                Icon = "rbxassetid://2541869220";
                Duration = 3;
            })
        end;
    };
    infstamina = {
        Aliases = {"stamina","noexhaust","noexhaustion","infrun","infstam","infinitestamina","infiniterun","infinitestam","stam"};
        Description = "Gives you infinite stamina";
        Function = function(Enabling,Args)
            if not Player.PlayerGui:FindFirstChild("HUD") or not Player.PlayerGui.HUD:FindFirstChild("StaminaFrame") then
                return
            end
            Toggles.InfStamina = Enabling
            local currenttext = ""
            local TempEnv = getsenv(GrabMainScript())
            local StaminaFrame = Player.PlayerGui.HUD.StaminaFrame
            if TempEnv == nil or StaminaFrame == nil then
                return
            end
            local UpValues = getupvalues(TempEnv.Stagger)
            if Enabling == true then
                for i,v in pairs(UpValues) do
                    if v == tonumber(StaminaFrame.EmptyBar.TextLabel.Text) then
                        setupvalue(TempEnv.Stagger,i,100)
                        if Variables.StaminaUpdateConnection == nil then
                            Variables.StaminaUpdateConnection = StaminaFrame.EmptyBar.TextLabel.Changed:Connect(function()
                                 local MainScript = GrabMainScript()
                                 if MainScript ~= nil then
                                     local TempEnv = getsenv(MainScript)
                                     setupvalue(TempEnv.Stagger,i,100) 
                                 end
                            end)
                        end
                    end
                end
                StaminaFrame.EmptyBar.TextLabel.Text = 100
                currenttext = "InfStamina is now ON!"
            else
                if Variables.StaminaUpdateConnection ~= nil and LoopOff then
                    Variables.StaminaUpdateConnection:Disconnect()
                    Variables.StaminaUpdateConnection = nil
                end
                for i,v in pairs(UpValues) do
                    if v == tonumber(StaminaFrame.EmptyBar.TextLabel.Text) then
                        setupvalue(TempEnv.Stagger,i,ToSet)
                    end
                end
                StaminaFrame.TextLabel.Text = ToSet
                currenttext = "InfStamina is now OFF!"
            end
            TempEnv = nil
            UpValues = nil
            StaminaFrame = nil
            game.StarterGui:SetCore("SendNotification", {
                Title = "notification";
                Text = currenttext;
                Icon = "rbxassetid://2541869220";
                Duration = 3;
            })
        end;
    };
    autoblock = {
        Aliases = {"autoparry","nodamage","autocounter","blockauto","alwaysblock"};
        Description = "Blocks incoming melee attacks";
        Function = function(Enabling,Args)
            Toggles.AutoBlock = Enabling
            local currenttext = ""
            if Enabling == true then
                game:GetService("ReplicatedStorage").Server.Events.Update:FireServer("Blocking", true)
                currenttext = "AutoBlock is now ON!"
            else
                game:GetService("ReplicatedStorage").Server.Events.Update:FireServer("Blocking", false)
                currenttext = "AutoBlock is now OFF!"
            end
            game.StarterGui:SetCore("SendNotification", {
                Title = "notification";
                Text = currenttext;
                Icon = "rbxassetid://2541869220";
                Duration = 3;
            })
        end;
    };
--[[
    oneshot = {
        Aliases = {"oneshot","instantkill","instakill","onetap","infdamage"};
        Description = "Instantly kill any enemies you hit.";
        Function = function(Enabling,Args)
            Toggles.OneShot = Enabling
            local currenttext = ""
            if Enabling == true then
                currenttext = "OneShot is now ON!"
            else
                currenttext = "OneShot is now OFF!"
            end
            game.StarterGui:SetCore("SendNotification", {
                Title = "notification";
                Text = currenttext;
                Icon = "rbxassetid://2541869220";
                Duration = 3;
            })
        end;
    };
--]]
    silentaim = {
        Aliases = {"silentaim","alwayshit","nevermiss","aimbot"};
        Description = "Makes all your shots hit the target closest to your mouse.";
        Function = function(Enabling,Args)
            Toggles.SilentAim = Enabling
            local currenttext = ""
            if Enabling == true then
                currenttext = "SilentAim is now ON!"
            else
                currenttext = "SilentAim is now OFF!"
            end
            game.StarterGui:SetCore("SendNotification", {
                Title = "notification";
                Text = currenttext;
                Icon = "rbxassetid://2541869220";
                Duration = 3;
            })
        end;
    };
}

Player.Chatted:Connect(function(Message)
    local Args = GetArgs(Message)
    local Prefix = string.sub(Args.Command,1,2)
    local Enabling = true
    if Prefix == "un" then
        Args.Command = string.sub(Args.Command,3,-1)
        Enabling = false
    end
    if Commands[Args.Command] then
        Commands[Args.Command].Function(Enabling,Args)
    else
        for i,v in pairs(Commands) do
            if table.find(v.Aliases, Args.Command) then
                v.Function(Enabling,Args)
                break
            end
        end
    end
end)

-- GUI HANDLING --

local Holder = Instance.new("ScreenGui")
local CommandBar = Instance.new("TextBox",Holder)
local CommandList = Instance.new("ScrollingFrame",Holder)

CommandBar.Name = "CommandBar"
CommandBar.Parent = Holder
CommandBar.BackgroundTransparency = 0
CommandBar.BorderSizePixel = 0
CommandBar.Position = UDim2.new(1, -240, 0.6, 0)
CommandBar.Size = UDim2.new(0, 240, 0, 25)
CommandBar.Font = Enum.Font.SourceSans
CommandBar.TextSize = 18
CommandBar.TextXAlignment = Enum.TextXAlignment.Left
CommandBar.TextColor3 = Color3.new(1, 1, 1)
CommandBar.BackgroundColor3 = Color3.new(54/255,57/255,63/255)
CommandBar.Text = ""
CommandBar.ZIndex = 10
CommandBar.PlaceholderText = "Press ' or click here to type commands"

CommandList.Name = "CMDs"
CommandList.Parent = Holder
CommandList.BackgroundTransparency = 0
CommandList.BorderSizePixel = 0
CommandList.Position = UDim2.new(1, -240, 0.6, 25)
CommandList.Size = UDim2.new(0, 240, 0, 175)
CommandList.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
CommandList.BackgroundColor3 = Color3.new(54/255,57/255,63/255)
CommandList.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CommandList.CanvasSize = UDim2.new(0, 0, 0, 0)
CommandList.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CommandList.ScrollBarThickness = 8
CommandList.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CommandList.VerticalScrollBarInset = 'Always'
CommandList.ZIndex = 10
CommandList.Visible = false

local Button = Instance.new("TextButton")
Button.Name = "Button"
Button.BackgroundTransparency = 1
Button.BorderSizePixel = 0
Button.Size = UDim2.new(0, 190, 0, 20)
Button.Visible = false
Button.Font = Enum.Font.SourceSans
Button.TextSize = 18
Button.Text = "Button"
Button.TextColor3 = Color3.new(1, 1, 1)
Button.TextXAlignment = Enum.TextXAlignment.Left
Button.ZIndex = 10

local ListLayout = Instance.new("UIListLayout", CommandList)


Holder.Parent = game.CoreGui

CommandBar.Focused:Connect(function()
    CommandList.Visible = true
    for i,v in pairs(CommandList:GetChildren()) do
        if v:IsA("TextButton") then
            v.Visible = true
        end
    end
end)

CommandBar.FocusLost:Connect(function(enterpressed, input)
    if enterpressed then
        game.Players:Chat(CommandBar.Text)
    end
    wait()
    CommandList.Visible = false
    for i,v in pairs(CommandList:GetChildren()) do
        if v:IsA("TextButton") then
            v.Visible = false
        end
    end
    CommandBar.Text = ""
end)

CommandBar:GetPropertyChangedSignal("Text"):Connect(function()
    if CommandBar.Text == "'" then
        CommandBar.Text = ""
    end
    for i,v in pairs(CommandList:GetChildren()) do
        if v:IsA("TextButton") then
            if string.sub(string.lower(v.Text), 0, #CommandBar.Text) ~= string.lower(CommandBar.Text) then
                v.Visible = false
            else
                v.Visible = true
            end
        end
    end
end)


for i,v in pairs(Commands) do
    local new = Button:Clone()
    new.Parent = CommandList
    new.Visible = false
    new.Name = i
    new.Text = string.gsub(i, "_", " ").." "..v.Description
end

-- INITIAL CONNECTION HANDLING --

if Player.Character ~= nil then
   CharacterLoaded(Player.Character)
end
Player.CharacterAdded:Connect(CharacterLoaded)

-- KEYBIND STUFF --

UserInputService.InputBegan:Connect(function(inputobject, stuffhappening)
    local Focused = UserInputService:GetFocusedTextBox()
    if tostring(Focused) == "ChatBar" or Focused == CommandBar then
        return
    end
    local key = string.gsub(string.lower(tostring(inputobject.KeyCode)), "enum.keycode.", "")


    if key == "leftshift" then
        Tables.SuperRun.ShiftHeld = true
        return
    end
    if key == "w" then
        Tables.SuperRun.WHeld = true
        return
    end
    if key == "s" then
        Tables.SuperRun.SHeld = true
        return
    end
    if key == "a" then
        Tables.SuperRun.AHeld = true
        return
    end
    if key == "d" then
        Tables.SuperRun.DHeld = true
        return
    end
    if key == "l" then
        Toggles.SuperRun = not Toggles.SuperRun
        local currenttext = ""
        if Toggles.SuperRun == true then
            if Variables.RenderStepConnection == nil then
                Variables.RenderStepConnection = game:GetService("RunService").Stepped:Connect(RenderStepped)
            end
            currenttext = "SuperRun is now ON!"
        else
            local LoopOff = false
            for i = 1,#Tables.Lists.LoopedFeatures do
                if Toggles[Tables.Lists.LoopedFeatures[i]] == true then
                    LoopOff = true
                    break
                end
            end
            if Variables.RenderStepConnection ~= nil and LoopOff then
                Variables.RenderStepConnection:Disconnect()
                Variables.RenderStepConnection = nil
            end
            currenttext = "SuperRun is now OFF!"
        end
        game.StarterGui:SetCore("SendNotification", {
            Title = "notification";
            Text = currenttext;
            Icon = "rbxassetid://2541869220";
            Duration = 3;
        })
        return
    end
    if key == "minus" then        
        Tables.SuperRun.RunSpeed = Tables.SuperRun.RunSpeed - 0.1
        game.StarterGui:SetCore("SendNotification", {
            Title = "notification";
            Text = "Your Super-Run speed is now "..tostring(Tables.SuperRun.RunSpeed).."!";
            Icon = "rbxassetid://2541869220";
            Duration = 3;
        })
        return
    end
    if key == "equals" then        
        Tables.SuperRun.RunSpeed = Tables.SuperRun.RunSpeed + 0.1
        game.StarterGui:SetCore("SendNotification", {
            Title = "notification";
            Text = "Your Super-Run speed is now "..tostring(Tables.SuperRun.RunSpeed).."!";
            Icon = "rbxassetid://2541869220";
            Duration = 3;
        })
        return
    end

    if key == "k" then
        Toggles.KillAura = not Toggles.KillAura
        if Toggles.KillAura == true then
            if Variables.RenderStepConnection == nil then
                Variables.RenderStepConnection = game:GetService("RunService").Stepped:Connect(RenderStepped)
            end
            currenttext = "KillAura is now ON!"
        else
            local LoopOff = false
            for i = 1,#Tables.Lists.LoopedFeatures do
                if Toggles[Tables.Lists.LoopedFeatures[i]] == true then
                    LoopOff = true
                    break
                end
            end
            if Variables.RenderStepConnection ~= nil and LoopOff then
                Variables.RenderStepConnection:Disconnect()
                Variables.RenderStepConnection = nil
            end
            currenttext = "KillAura is now OFF!"
        end
        game.StarterGui:SetCore("SendNotification", {
            Title = "notification";
            Text = currenttext;
            Icon = "rbxassetid://2541869220";
            Duration = 3;
        })
    end

    if key == "quote" then
        CommandBar:CaptureFocus()
    end

end)


UserInputService.InputEnded:Connect(function(inputobject, stuffhappening)
    local Focused = UserInputService:GetFocusedTextBox()
    if tostring(Focused) == "ChatBar" or Focused == CommandBar then
        return
    end
    local key = string.gsub(string.lower(tostring(inputobject.KeyCode)), "enum.keycode.", "")

    if key == "leftshift" then
        Tables.SuperRun.ShiftHeld = false
        return
    end
    if key == "w" then
        Tables.SuperRun.WHeld = false
        return
    end
    if key == "s" then
        Tables.SuperRun.SHeld = false
        return
    end
    if key == "a" then
        Tables.SuperRun.AHeld = false
        return
    end
    if key == "d" then
        Tables.SuperRun.DHeld = false
        return
    end
end)

-- COMMANDS & INJECTED MESSAGE --

warn([[
COMMANDS CAN BE DONE AS /e command OR :command

:killaura - Attacks any enemy near you
:unkillaura - Turns off killaura

:silentaim - Makes your attacks always hit the closest person to your mouse
:unsilentaim - Turns off silentaim

:autoblock - Blocks incoming melee attacks
:unautoblock - Turns off autoblock

:infstamina - Gives you infinite stamina
:uninfstamina - Removes infinite stamina

:superrun - Enables super run
:unsuperrun - Disables super run

L Key: Toggle super run
- Key: Lower super run speed
+ Key: Increase super run speed


!! PRESS ' TO TYPE IN COMMAND BAR !!


]])

game.StarterGui:SetCore("SendNotification", {
    Title = 'UNTITLED MELEE GAME';
    Text = "SUCCESSFULLY INJECTED, F9 FOR CMDS                    (MADE BY AIDEZ)";
    Icon = "rbxassetid://2541869220";
    Duration = 7;
})


